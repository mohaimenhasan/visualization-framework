{
  "id": "inf-regress-results-latest",
  "author": "Ryan Fredette",
  "service": "elasticsearch",
  "query": {
    "index": "nuage_regress",
    "type": "nuage_doc_type",
    "body": {
      "sort": [
        { "time_regression_started" : {"order" : "desc"}}
      ],
      "size": 0,
      "query": {
        "bool": {
          "must": [
            {
              "range":{
                "time_regression_submitted":{
                  "gte":"{{startTime:now-24h}}",
                  "lte":"{{endTime:now}}",
                  "format":"epoch_millis"
                }
              }
            }
          ],
          "filter": [
            {"wildcard": { "version.vrs": "{{vrsVersion}}" }},
            {"wildcard": { "version.vsc": "{{vscVersion}}" }},
            {"wildcard": { "version.vsd": "{{vsdVersion}}" }}
          ],
          "must_not": [
            {
              "match_phrase": {
                "testsuite": "Sanity"
              }
            },
            {
              "match_phrase": {
                "testsuite": "initial"
              }
            },
            {
              "match_phrase": {
                "testsuite": "final"
              }
            },
            {
              "match_phrase": {
                "testsuite": "finished"
              }
            },
            {
              "match_phrase": {
                "testcase": "no_name"
              }
            },
            {
              "term": { "result": 0 }
            }
          ]
        }
      },
      "_source": {
        "excludes": []
      },
      "aggs": {
        "testcase": {
          "terms": {
            "field": "testcase",
            "size": 50,
            "order": {
              "_count": "desc"
            }
          },
          "aggs": {
            "testsuite": {
              "terms": {
                "field": "testsuite",
                "size": 5,
                "order": {
                  "_count": "desc"
                }
              }
            },
            "result": {
              "terms": {
                "field": "result",
                "size": 1,
                "order": {
                    "latest" : "desc"
                }
              },
              "aggs": {
                "latest": {
                    "max": {"field": "time_regression_started"}
                }
              }
            },
            "secondResult": {
              "scripted_metric": {
                "params": {
                  "_agg": {}
                },
                "init_script": "params._agg.myResults = [0, 0]; params._agg.myTimes = [0, 0]",
                "map_script": "if (doc['time_regression_started'].value > params._agg.myTimes[0]) { params._agg.myResults[1] = params._agg.myResults[0]; params._agg.myTimes[1] = params._agg.myTimes[0]; params._agg.myResults[0] = doc['result'].value; params._agg.myTimes[0] = doc['time_regression_started'].value; } else if (doc['time_regression_started'].value > params._agg.myTimes[1]) { params._agg.myResults[1] = doc['result'].value; params._agg.myTimes[1] = doc['time_regression_started'].value; }",
                "reduce_script": "long[] results = new long[2]; long[] times = new long[2]; times[0] = times[1] = 0; for (a in params._aggs) { if (a.myTimes[0] > times[0]) { results[1] = results[0]; times[1] = times[0]; results[0] = a.myResults[0]; times[0] = a.myTimes[0]; if (a.myTimes[1] > times[1]) { results[1] = a.myResults[1]; times[1] = a.myTimes[1]; } } else if (a.myTimes[0] > times[1]) { results[1] = a.myResults[0]; times[1] = a.myTimes[0]; } } return results[1];"
              }
            }
          }
        }
      }
    }
  }
}

